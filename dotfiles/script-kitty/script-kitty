#!/usr/bin/env bash

set -euo pipefail

LOCK_FILE="/tmp/script_kitty.lock"

if [[ -f "$LOCK_FILE" ]]; then
  old_pid="$(cat "$LOCK_FILE" || true)"
  if [[ -n "${old_pid:-}" ]] && ps -p "$old_pid" >/dev/null 2>&1; then
    echo "Killing previous instance (PID $old_pid)..."
    kill -9 "$old_pid" 2>/dev/null || true
    rm -f "$LOCK_FILE"
    exit 0
  fi
fi

echo $$ >"$LOCK_FILE"

# Ensure lock file is cleaned up on exit
cleanup() {
  # Only remove if it's ours
  if [[ -f "$LOCK_FILE" ]] && [[ "$(cat "$LOCK_FILE" 2>/dev/null)" == "$$" ]]; then
    rm -f "$LOCK_FILE"
  fi
}
trap cleanup EXIT INT TERM

# main logic

SCRIPT_KITTY_DIR="$HOME/nix-config/dotfiles/script-kitty"
script="$(
  find "$SCRIPT_KITTY_DIR"/scripts -type f -printf '%f\n' |
    sort |
    fzf --cycle --layout=reverse --prompt '$ ' \
      --border --border-label=' script kitty ' \
      --preview="bat --color=always --plain $SCRIPT_KITTY_DIR/scripts/{}" \
      --preview-window='right:50%'
)"

output=$("$SCRIPT_KITTY_DIR/scripts/$script")
if [[ -n "$output" ]]; then
  osascript -e 'display notification "'"$output"'" with title "script kitty - '"$script"'"'
fi
